<?php

declare(strict_types=1);

namespace Support;

use JetBrains\PhpStorm\Language;
use Throwable;
use InvalidArgumentException;

final readonly class PHPStorm
{
    private FileInfo $projectRoot;

    private function __construct(
        ?string          $projectRootDirectory = null,
        protected string $generator = self::class,
    ) {
        $projectRootDirectory ??= getProjectRootDirectory();
        $this->projectRoot = new FileInfo( "{$projectRootDirectory}/.phpstorm.meta.php" );
    }

    public static function generateMeta( ?string $projectRootDirectory = null ) : PHPStorm
    {
        return new self( $projectRootDirectory, __METHOD__ );
    }

    /**
     * @param array{0: class-string, 1: string}|callable|callable-string|string $functionReference
     * @param int                                                               $argument
     * @param ?string                                                           ...$values
     *
     * @return self
     * @throws Throwable
     */
    public function stringValues(
        array|string|callable $functionReference,
        int                   $argument = 0,
        ?string            ...$values,
    ) : self {
        try {
            [$class, $method]  = explode_class_callable( $functionReference );
            $functionReference = "\\{$class}::{$method}()";
        }
        catch ( Throwable $exception ) {
            if ( ! \is_string( $functionReference ) || ! \str_ends_with( $functionReference, '()' ) ) {
                throw new InvalidArgumentException(
                    __METHOD__.' could not parse $functionReference.',
                    $exception->getCode(),
                    $exception,
                );
            }
        }

        $file      = '.'.Normalize::key( $functionReference, '_' ).'.meta.php';
        $arguments = "'".\implode( "', '", $values )."'";

        $this->save(
            $this->projectRoot->append( $file ),
            <<<PHP
                namespace PHPSTORM_META;
                    
                expectedArguments(
                    {$functionReference},
                    {$argument},
                    {$arguments}
                );
                PHP,
        );

        return $this;
    }

    /**
     * @param FileInfo $fileInfo
     * @param string   $PHP
     *
     * @return void
     */
    final protected function save(
        FileInfo $fileInfo,
        #[Language( 'PHP' )] string   $PHP,
    ) : void {
        $generator = '\\'.$this::class;
        $generated = new Time();
        $timestamp = $generated->unixTimestamp;
        $date      = $generated->datetime;
        $name      = \trim( $fileInfo->getFilename(), '.' );

        $timestamp = "#{$timestamp}#";

        $meta = <<<PHP
            <?php
            
            /*--------------------------------------------------------{$timestamp}-
            
               Name      : {$name}
               Generated : {$date}
            
               This file is generated by {$generator}.
            
               Do not edit it manually.
            
            ---------------------------------------------------------------------*/
            
            {$PHP}
            PHP;

        $fileInfo->save( $meta );
    }
}
